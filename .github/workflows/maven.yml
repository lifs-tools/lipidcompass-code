# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        lfs: 'true'      
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
    - name: Set Git user
      run: |
        git config --global committer.email "noreply@github.com"
        git config --global committer.name "GitHub"
        git config --global author.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git config --global author.name "${GITHUB_ACTOR}"
    - name: Setup Maven settings.xml
      uses: whelk-io/maven-settings-xml-action@v14
      with:
        servers: '[{ "id": "lifstools-jfrog", "username": "github-deployer", "password": "${env.ARTIFACTORY_TOKEN_REF}" }, { "id": "lifs-new-central", "username": "github-deployer", "password": "${env.ARTIFACTORY_TOKEN_REF}" }, { "id": "lifs-new-snapshots", "username": "github-deployer", "password": "${env.ARTIFACTORY_TOKEN_REF}" }, {"id": "docker.lifs-tools.org", "username":"${secrets.LIFS_TOOLS_DOCKER_REGISTRY_USER}", "password":"${secrets.LIFS_TOOLS_DOCKER_REGISTRY_PW}"}]'
    - name: Set Release version env variable
      env:
        USERNAME: ${{ github.actor }}
        PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV  
    - name: Login to LIFS Tools registry
      uses: docker/login-action@v1
      with:
        registry: docker.lifs-tools.org
        username: ${{ secrets.LIFS_TOOLS_DOCKER_REGISTRY_USER }}
        password: ${{ secrets.LIFS_TOOLS_DOCKER_REGISTRY_PW }}
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-        
    - name: Build with Maven
      env:
        USERNAME: ${{ github.actor }}
        PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        ARTIFACTORY_TOKEN_REF: ${{ secrets.ARTIFACTORY_TOKEN }}        
      run: ./mvnw -B install -Pdocker,lh-prod --file pom.xml

