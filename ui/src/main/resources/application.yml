# 
# Copyright 2021 The LipidCompass Developers.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# Development profile configuration file for Lipid Compass Gateway.
---
logging:
    level:
        org.springframework: INFO
        org.springframework.cloud.gateway: INFO
        org.springframework.http.server.reactive: OFF
        reactor.netty: OFF

spring:
    application:
        name: lipidcompass-ui
    cloud:
        config:
            enabled: false
    mvc:
        throw-exception-if-no-handler-found: true

    security:
        oauth2:
            # register keycloak as an OAUTH2 authorization server, gateway acts as a client to extract role information
            client:
                registration:
                    keycloak:
                        client-id: lipidcompass
                        client-secret: ${lipidcompass_prod_keycloak_client_secret}
                        authorization-grant-type: authorization_code
                        redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
                        scope: openid,profile,email
                provider:
                    keycloak:
                        # https://medium.com/@hantsy/secures-your-application-with-spring-security-5-and-keycloak-2804ee912b0f and https://github.com/hantsy/keycloak-springsecurity5-sample
                        authorization-uri: https://lifs-tools.org/auth/realms/lifs/protocol/openid-connect/auth
                        token-uri: https://lifs-tools.org/auth/realms/lifs/protocol/openid-connect/token
                        user-info-uri: https://lifs-tools.org/auth/realms/lifs/protocol/openid-connect/userinfo
                        jwk-set-uri: https://lifs-tools.org/auth/realms/lifs/protocol/openid-connect/certs
                        user-name-attribute: preferred_username
                        user-info-authentication-method: form
            # gateway acts as an OAUTH2 resourceserver, protecting and proxying to downstream services, jwts are validated
            resourceserver:
                jwt:
                    # settings for oauth2 resourcesserver (https://docs.spring.io/spring-security/site/docs/current/reference/html5/#oauth2resourceserver-jwt-jwkseturi)
                    issuer-uri: https://lifs-tools.org/auth/realms/lifs
                    jwk-set-uri: https://lifs-tools.org/auth/realms/lifs/protocol/openid-connect/certs

server:
    port: 8091
    forward-headers-strategy: native

eureka:
    client:
        register-with-eureka: true
        fetch-registry: true
        serviceUrl:
            defaultZone: ${EUREKA_URI:http://localhost:28092/eureka}
    instance:
        preferIpAddress: true

management:
    endpoints:
        enabled-by-default: false
    endpoint:
        info:
            enabled: true
        gateway:
            enabled: true
