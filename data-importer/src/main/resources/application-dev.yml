# 
# Copyright 2021 The LipidCompass Developers.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# Development profile configuration file for Lipid Compass Dataimporter.
---
logging:
    level:
        org.springframework: INFO
        logging.level.org.lifstools.jgoslin: WARN
        logging.level.org.lipidcompass.backend.audit: INFO
        logging.level.org.lipidcompass.batch: INFO
        logging.level.org.lipidcompass.batch.data.importer.swisslipids: INFO
        logging.level.org.lipidcompass.batch.data.importer.lipidmaps: DEBUG
        logging.level.org.lipidcompass.batch.data.importer.utilities: DEBUG
        logging.level.org.lipidcompass.batch.data.importer.mztab: DEBUG

spring:
    aop:
        proxy-target-class: true
    application:
        name: lipidcompass-data-importer

    batch:
        job:
            enabled: false
        jdbc:
            initialize-schema: ALWAYS
    cloud:
        config:
            enabled: false 
#    data:
#        solr:
#            host: ${SOLR_URI:http://127.0.0.1:8983/solr,http://127.0.0.1:8984/solr}
#            zk-host: ${ZK_HOST:127.0.0.1:28181}

    datasource:
        url: jdbc:h2:file:${BATCH_DATABASE_DIR:~/lipid-compass-data-importer-h2-db}
        username: ${BATCH_DATABASE_USER:sa}
        password: ${BATCH_DATABASE_PASSWORD}
        driver-class-name: org.h2.Driver

    h2:
        console:
            enabled: true
            path: /h2

    jpa:
        hibernate:
            ddl-auto: update
    mail:
        host: mail.lifs-tools.org
        port: 25
        username: ${MAIL_USER}
        password: ${MAIL_PASSWORD}
        smtp:
            auth: true
        properties:
            mail:
                smtp:
                    starttls:
                        enable: true
                        required: true
    mvc:
        throw-exception-if-no-handler-found: true

    security:
        oauth2:
            # register keycloak as an OAUTH2 authorization server, gateway acts as a client to extract role information
            client:
                registration:
                    keycloak:
                        client-id: lipidcompass
                        client-secret: ${KEYCLOAK_CLIENT_SECRET}
                        authorization-grant-type: authorization_code
                        redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
                        scope: openid,profile,email
                provider:
                    keycloak:
                        # https://medium.com/@hantsy/secures-your-application-with-spring-security-5-and-keycloak-2804ee912b0f and https://github.com/hantsy/keycloak-springsecurity5-sample
                        authorization-uri: ${KEYCLOAK_REALM_URI}/protocol/openid-connect/auth
                        token-uri: ${KEYCLOAK_REALM_URI}/protocol/openid-connect/token
                        user-info-uri: ${KEYCLOAK_REALM_URI}/protocol/openid-connect/userinfo
                        jwk-set-uri: ${KEYCLOAK_REALM_URI}/protocol/openid-connect/certs
                        user-name-attribute: preferred_username
                        user-info-authentication-method: form
            # gateway acts as an OAUTH2 resourceserver, protecting and proxying to downstream services, jwts are validated
            resourceserver:
                jwt:
                    # settings for oauth2 resourcesserver (https://docs.spring.io/spring-security/site/docs/current/reference/html5/#oauth2resourceserver-jwt-jwkseturi)
                    issuer-uri: ${KEYCLOAK_REALM_URI}
                    jwk-set-uri: ${KEYCLOAK_REALM_URI}/protocol/openid-connect/certs

server:
    port: 8088
    forward-headers-strategy: native

eureka:
    client:
        register-with-eureka: true
        fetch-registry: true
        serviceUrl:
            defaultZone: ${EUREKA_URI:http://localhost:28092/eureka}
    instance:
        preferIpAddress: true
        homePageUrlPath: ${server.servlet.contextPath}

management:
    endpoints:
        web:
            exposure:
                include: "*"

lipidcompass:
    data-importer:
        api:
            version: 1

arangodb:
    host: 127.0.0.1
    port: ${ARANGODB_PORT:28091}
    timeout: ${ARANGODB_TIMEOUT:5000}
    user: ${ARANGODB_USER:root}
    # docker secret lipidcompass_dev_infra_arangodb needs to exist locally
    password: ${ARANGODB_PASSWORD}
    jwt:
    useSsl: ${ARANGODB_USE_SSL:false}
    database: lipidcompass-dev
    # chunksize in bytes
    chunksize: 300000
    truncate: false

batch:
    config:
        package:
            javaconfig: org.lipidcompass.batch.config.jobs

swissLipids:
    import:
        dir: /var/data/lipidcompass/import/external/SwissLipids
lipidMaps:
    import:
        dir: /var/data/lipidcompass/import/external/LipidMaps
        chunksize: 5000
mzTab:
    import:
        dir: /var/data/lipidcompass/import/submissions

#solr:
#    import:
#        chunksize: 50000
#    backupLocation: /var/solr/backup
## use CLOUD to switch to distributed solr, STANDALONE for single node mode
#    mode: CLOUD
#    collections: lc-lipid-quantities, lc-lipidmaps, lc-lipids, lc-mztab, lc-swisslipids
#    host: ${SOLR_URI:http://localhost:28093/solr}
#    mztab: 
#        core: ${SOLR_MZTAB_CORE:lc-mztab}
#    lipids:
#        core: ${SOLR_LIPIDS_CORE:lc-lipids}
#    lipidmaps:
#        core: ${SOLR_LIPIDMAPS_CORE:lc-lipidmaps}
#    swisslipids:
#        core: ${SOLR_SWISSLIPIDS_CORE:lc-swisslipids}
#    lipidquantities:
#        core: ${SOLR_LIPIDQUANTITIES_CORE:lc-lipid-quantities}
        
minio:
    endpoint: ${MINIO_ENDPOINT:127.0.0.1}
    port: ${MINIO_PORT:9000}
    accessKey: ${MINIO_ACCESS_KEY:default}
    secretKey: ${MINIO_SECRET_KEY:default}
    useHttps: ${MINIO_USE_HTTPS:false}
    defaultBucketName: ${MINIO_DEFAULT_BUCKET_NAME:lipidcompass}
    maxFileSize: ${MINIO_MAX_FILE_SIZE:786187}
    tmpDir: ${java.io.tmpdir}/lipidcompass/upload-dir

springdoc:
  version: '@springdoc.version@'
  api-docs:
    version: openapi_3_1
  cache:
    disabled: true
